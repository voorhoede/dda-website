---
import { t } from '@lib/i18n';
import { datocmsRequest } from '@lib/datocms';
import { setCacheControl } from '@lib/cache-control';
import type {
  EventPageQuery,
  EventPageQueryVariables,
  SiteLocale,
} from '@lib/types/datocms';
import eventPageQuery from './_eventPage.query.graphql';
import Layout from '@layouts/Default.astro';
import {
  PageTitle,
  PageTitleContent,
  PageTitleHeader,
} from '@components/PageTitle';
import { Heading } from '@components/Heading';
import { Button } from '@components/Button';
import { Text } from '@components/Text';
import { SRCImage } from 'react-datocms';
import { Column, Grid } from '@components/Grid';
import { formatDate } from '@lib/date';
import TextBlock from '@blocks/TextBlock/TextBlock.astro';
import { EventDate } from '@components/EventDate/EventDate';

setCacheControl(Astro.response);

const { locale, slug } = Astro.params as { locale: SiteLocale; slug: string };
const { page } = await datocmsRequest<EventPageQuery, EventPageQueryVariables>({
  query: eventPageQuery,
  variables: { locale, slug },
});

if (!page || page.details.__typename !== 'InternalEventRecord') {
  return new Response(null, { status: 404 });
}
---

<Layout pageUrls={[]} seoMetaTags={page.details._seoMetaTags}>
  <PageTitle>
    <PageTitleHeader>
      <Button
        as="a"
        href="../"
        className="back-button"
        level="tertiary"
        icon="arrow-left"
        iconPosition="left">{t('back_to_events')}</Button
      >
      <Heading level={1}>{page.title}</Heading>
    </PageTitleHeader>
    <PageTitleContent>
      <Text variant="subtext">
        <EventDate startDate={page.startDate} endDate={page.endDate} />
        {' '}/ {page.location}
      </Text>
    </PageTitleContent>
  </PageTitle>

  {
    page.details.banner?.responsiveImage && (
      <div class="banner">
        <SRCImage
          pictureClassName="banner__picture"
          imgClassName="banner__image"
          imgStyle={{ maxWidth: '100%', maxHeight: '776px' }}
          data={page.details.banner.responsiveImage}
          priority={true}
        />
      </div>
    )
  }

  <Grid className="event" rowGap={40} columnGap={32}>
    <Column span={{ mobile: 12, tablet: 5 }}>
      <Text variant="subtext"
      >{page.title} - <time datetime={page.date}>{formatDate(page.date)}</time
        >, {page.location}</Text
      >
    </Column>

    <Column className="event__details" span={{ mobile: 12, tablet: 7 }}>
      <section class="text-section">
        <Heading level={2} displayLevel={4}>{page.details.introText}</Heading>
        <TextBlock block={page.details.text} />
      </section>

      {
        page.details.schedule.length > 0 && (
          <section class="schedule">
            <Heading level={2} displayLevel={3}>
              {t('schedule')}
            </Heading>

            <table class="schedule-table">
              <thead class="a11y-sr-only">
                <tr>
                  <th>{t('activity')}</th>
                  <th>{t('time')}</th>
                </tr>
              </thead>

              <tbody>
                {page.details.schedule.map((activity) => (
                  <tr class="schedule-table-row">
                    <td>{activity.name}</td>
                    <td>
                      {activity.start} - {activity.end}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </section>
        )
      }
    </Column>
  </Grid>
</Layout>

<style>
  .back-button {
    margin-block-end: var(--spacing-16);
  }

  .banner :global(.banner__picture) {
    width: 100%;
    display: block;
    line-height: 0;
  }

  .banner :global(.banner__image) {
    border: 1px solid var(--color-black);
    max-height: 776px;
    object-fit: cover;
  }

  .event {
    padding: var(--spacing-40) var(--spacing-16);
  }

  .event__details {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-96);
  }

  .text-section {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-48);
  }

  .schedule,
  .register {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-24);
  }

  .schedule-table {
    border: 1px solid var(--color-black);
    padding: var(--spacing-24);
  }

  .schedule-table-row {
    padding-block: var(--spacing-12);
    border-block-end: 1px solid var(--color-black);
    display: flex;
    gap: var(--spacing-48);
  }

  .schedule-table-row:last-child {
    border-block-end: none;
  }

  .schedule-table-row td {
    flex: 1;
  }

  @media screen and (min-width: 890px) {
    .banner {
      padding-inline: var(--spacing-48);
    }

    .event {
      padding: var(--spacing-48);
      padding-block-end: var(--spacing-96);
    }

    .text-section {
      gap: var(--spacing-64);
    }
  }
</style>
