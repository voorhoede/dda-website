---
import { datocmsCollection, datocmsRequest } from '@lib/datocms';
import type {
  ImageBlockFragment,
  PageHeaderFragment,
  PageQuery,
  PageRecord,
  ParentPageFragment,
  SiteLocale,
  VideoEmbedBlockFragment,
} from '@lib/types/datocms';
import Layout from '@layouts/Default.astro';
import Blocks from '@blocks/Blocks.astro';
import type { AnyBlock } from '@blocks/Blocks';
import { getPagePath, getPageSlugFromPath } from '@blocks/InternalLink';
import PageHeader from '@blocks/PageHeader/PageHeader.astro';
import PreviewModeSubscription from '@components/PreviewMode/PreviewModeSubscription.astro';
import query from './_index.query.graphql';
import { defaultLocale, t } from '@lib/i18n';
import { Column, Grid } from '@components/Grid';
import { Text } from '@components/Text';
import { Button } from '@components/Button';

export const prerender = true;

export async function getStaticPaths() {
  interface PagesCollectionItem {
    _allSlugLocales: Array<{ locale: SiteLocale; value: string }>;
    parentPage: ParentPageFragment;
  }

  const pages = await datocmsCollection<PagesCollectionItem>({
    collection: 'Pages',
    fragmentName: 'Page',
    fragment: `
      fragment Page on PageRecord {
        _allSlugLocales { locale, value }
        parentPage {
          _allSlugLocales { locale, value }
          parentPage {
            _allSlugLocales { locale, value }
            parentPage {
              _allSlugLocales { locale, value }
            }
          }
        }
      }
    `,
  });

  return pages.flatMap((page) => {
    return {
      params: {
        locale: defaultLocale,
        path: getPagePath({
          page: page as PageRecord,
          locale: defaultLocale as SiteLocale,
        }),
      },
    };
  });
}

type Params = {
  locale: SiteLocale;
  path: string;
};

const { locale = defaultLocale, path } = Astro.params as Params;
const variables = { locale, slug: getPageSlugFromPath(path) };
const { page } = (await datocmsRequest<PageQuery>({ query, variables })) as {
  page: PageRecord;
};
---

<Layout pageUrls={[]} seoMetaTags={page._seoMetaTags}>
  <PreviewModeSubscription query={query} variables={variables} />

  <PageHeader
    title={page.header?.title}
    subtitle={page.header?.subtitle}
    visual={page.header?.visual as PageHeaderFragment['visual']}
  >
    <Fragment slot="header">
      <Button
        as="a"
        href="/"
        className="back-button"
        level="tertiary"
        icon="arrow-left"
        iconPosition="left">{t('back_to_home')}</Button
      >
    </Fragment>
  </PageHeader>

  <Grid
    gap={{ mobile: 16, tablet: 32 }}
    className="container-padding-y container-padding-x"
  >
    <Column span={{ mobile: 12, tablet: 5 }}>
      {
        (page.header.visual as ImageBlockFragment)?.image?.title && (
          <Text
            aria-hidden="true"
            variant="subtext"
            className="publication__image-title"
          >
            {(page.header.visual as ImageBlockFragment)?.image?.title}
          </Text>
        )
      }
      {
        (page.header.visual as VideoEmbedBlockFragment)?.video?.title && (
          <Text
            aria-hidden="true"
            variant="subtext"
            className="publication__image-title"
          >
            {(page.header.visual as VideoEmbedBlockFragment)?.video?.title}
          </Text>
        )
      }
    </Column>
    <Column as="section" span={{ mobile: 12, tablet: 7 }}>
      <Blocks blocks={page.bodyBlocks as AnyBlock[]} />
    </Column>
  </Grid>
</Layout>
