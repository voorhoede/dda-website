---
import { getCollection } from 'astro:content';
import type { StructuredText as StructuredTextData } from 'datocms-structured-text-utils';
import React from 'react';
import type { RenderInlineRecordContext } from 'react-datocms';
import { StructuredText } from 'react-datocms';

import ImageBlock from '@blocks/ImageBlock/ImageBlock.astro';
import VideoEmbedBlock from '@blocks/VideoEmbedBlock/VideoEmbedBlock.astro';
import { Heading } from '@components/Heading';
import {
  PageTitle,
  PageTitleContent,
  PageTitleFooter,
  PageTitleHeader,
} from '@components/PageTitle';
import type {
  ImageBlockFragment,
  PageHeaderFragment,
  VideoEmbedBlockFragment,
} from '@lib/types/datocms';

import './PageHeader.css';

type Props = PageHeaderFragment & {
  spacious?: boolean;
};

const { title, subtitle, visual, spacious = false } = Astro.props;

const collections = {
  members: await getCollection('members'),
  vacancies: await getCollection('vacancies'),
};

const renderInlineRecord = ({ record }: RenderInlineRecordContext<any>) => {
  const collection = collections[record.recordType as keyof typeof collections];

  if (!collection) {
    return null;
  }

  return React.createElement('span', null, collection.length.toString());
};
---

<div class="page-header">
  <PageTitle spacious={spacious}>
    <PageTitleHeader spacious={spacious}>
      {
        Astro.slots.header && (
          <div class="header-slot">
            <slot name="header" />
          </div>
        )
      }

      <Heading level={1} displayLevel={1}>
        {title}
      </Heading>
    </PageTitleHeader>

    {
      subtitle && (
        <PageTitleContent>
          <StructuredText
            data={subtitle as StructuredTextData<any, any>}
            renderInlineRecord={renderInlineRecord}
          />
        </PageTitleContent>
      )
    }
    {
      Astro.slots.footer && (
        <PageTitleFooter>
          <slot name="footer" />
        </PageTitleFooter>
      )
    }
  </PageTitle>

  <div class="visual container-padding-x">
    {
      (visual as ImageBlockFragment)?.image && (
        <ImageBlock block={visual as ImageBlockFragment} showTitle={false} priority={true} />
      )
    }

    {
      (visual as VideoEmbedBlockFragment)?.video && (
        <VideoEmbedBlock block={visual as VideoEmbedBlockFragment} />
      )
    }
  </div>
</div>

<style>
  .header-slot {
    margin-block-end: var(--spacing-16);
  }
</style>
